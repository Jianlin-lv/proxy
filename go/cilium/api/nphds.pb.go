// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cilium/api/nphds.proto

package cilium

import (
	context "context"
	fmt "fmt"
	v2 "github.com/cilium/proxy/go/envoy/api/v2"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The mapping of a network policy identifier to the IP addresses of all the
// hosts on which the network policy is enforced.
// A host may be associated only with one network policy.
type NetworkPolicyHosts struct {
	// The unique identifier of the network policy enforced on the hosts.
	Policy uint64 `protobuf:"varint,1,opt,name=policy,proto3" json:"policy,omitempty"`
	// The set of IP addresses of the hosts on which the network policy is enforced.
	// Optional. May be empty.
	HostAddresses        []string `protobuf:"bytes,2,rep,name=host_addresses,json=hostAddresses,proto3" json:"host_addresses,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkPolicyHosts) Reset()         { *m = NetworkPolicyHosts{} }
func (m *NetworkPolicyHosts) String() string { return proto.CompactTextString(m) }
func (*NetworkPolicyHosts) ProtoMessage()    {}
func (*NetworkPolicyHosts) Descriptor() ([]byte, []int) {
	return fileDescriptor_b09d37d0b8c67603, []int{0}
}

func (m *NetworkPolicyHosts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkPolicyHosts.Unmarshal(m, b)
}
func (m *NetworkPolicyHosts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkPolicyHosts.Marshal(b, m, deterministic)
}
func (m *NetworkPolicyHosts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkPolicyHosts.Merge(m, src)
}
func (m *NetworkPolicyHosts) XXX_Size() int {
	return xxx_messageInfo_NetworkPolicyHosts.Size(m)
}
func (m *NetworkPolicyHosts) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkPolicyHosts.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkPolicyHosts proto.InternalMessageInfo

func (m *NetworkPolicyHosts) GetPolicy() uint64 {
	if m != nil {
		return m.Policy
	}
	return 0
}

func (m *NetworkPolicyHosts) GetHostAddresses() []string {
	if m != nil {
		return m.HostAddresses
	}
	return nil
}

func init() {
	proto.RegisterType((*NetworkPolicyHosts)(nil), "cilium.NetworkPolicyHosts")
}

func init() { proto.RegisterFile("cilium/api/nphds.proto", fileDescriptor_b09d37d0b8c67603) }

var fileDescriptor_b09d37d0b8c67603 = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x92, 0xc1, 0x4e, 0xc2, 0x40,
	0x10, 0x86, 0xdd, 0x82, 0x4d, 0xd8, 0x44, 0x0f, 0x3d, 0x40, 0xd3, 0x10, 0x25, 0xd5, 0x44, 0x62,
	0x62, 0x6b, 0xf0, 0xc6, 0xc5, 0x68, 0x88, 0xf1, 0x64, 0x0c, 0x3c, 0x00, 0x59, 0xdb, 0x09, 0xac,
	0x96, 0x9d, 0xba, 0xb3, 0xd4, 0x70, 0xf5, 0xe6, 0x15, 0xdf, 0xc6, 0x93, 0xef, 0xe0, 0x2b, 0x78,
	0xf1, 0x29, 0x34, 0xb4, 0x60, 0x02, 0xa2, 0x37, 0x6f, 0x33, 0xfb, 0xff, 0x3b, 0xdf, 0xee, 0xfe,
	0xcb, 0xab, 0x91, 0x4c, 0xe4, 0x78, 0x14, 0x8a, 0x54, 0x86, 0x2a, 0x1d, 0xc6, 0x14, 0xa4, 0x1a,
	0x0d, 0x3a, 0x76, 0xb1, 0xee, 0xd5, 0x41, 0x65, 0x38, 0xc9, 0xe5, 0xac, 0x15, 0xc6, 0x92, 0x22,
	0xcc, 0x40, 0x4f, 0x0a, 0x97, 0x57, 0x1f, 0x20, 0x0e, 0x12, 0xc8, 0x65, 0xa1, 0x14, 0x1a, 0x61,
	0x24, 0xaa, 0xf9, 0x0c, 0xaf, 0x96, 0x89, 0x44, 0xc6, 0xc2, 0x40, 0xb8, 0x28, 0x0a, 0xc1, 0x1f,
	0x71, 0xe7, 0x0a, 0xcc, 0x03, 0xea, 0xbb, 0x6b, 0x4c, 0x64, 0x34, 0xb9, 0x44, 0x32, 0xe4, 0x54,
	0xb9, 0x9d, 0xe6, 0xad, 0xcb, 0x1a, 0xac, 0x59, 0xee, 0xce, 0x3b, 0xe7, 0x94, 0x6f, 0x0f, 0x91,
	0x4c, 0x5f, 0xc4, 0xb1, 0x06, 0x22, 0x20, 0xd7, 0x6a, 0x94, 0x9a, 0x95, 0x73, 0xf7, 0xe5, 0xe3,
	0xb5, 0xb4, 0x39, 0x65, 0x96, 0xcb, 0x66, 0x55, 0x65, 0xca, 0x6c, 0xbf, 0xac, 0xad, 0x06, 0xeb,
	0x6e, 0xcd, 0xfc, 0x67, 0x0b, 0x7b, 0xeb, 0xd3, 0xe2, 0xfe, 0x4f, 0x5e, 0x67, 0x71, 0x97, 0x1e,
	0xe8, 0x4c, 0x46, 0xe0, 0xdc, 0xf2, 0x5a, 0x07, 0x12, 0x23, 0xd6, 0x1c, 0x6d, 0x2f, 0xc8, 0x9f,
	0x21, 0x10, 0xa9, 0x0c, 0xb2, 0x56, 0x90, 0xdb, 0xbe, 0xf7, 0x77, 0xe1, 0x7e, 0x0c, 0x64, 0xbc,
	0xfd, 0xbf, 0x4d, 0x94, 0xa2, 0x22, 0xf0, 0x37, 0x9a, 0xec, 0x98, 0x39, 0x82, 0xbb, 0x3d, 0xa3,
	0x41, 0x8c, 0xd6, 0xc0, 0x76, 0x56, 0xe6, 0xac, 0x72, 0x76, 0x7f, 0xd5, 0x97, 0x10, 0x4f, 0x8c,
	0xd7, 0x2e, 0xc0, 0x44, 0xc3, 0xff, 0x40, 0x1c, 0x3d, 0xbe, 0xbd, 0x3f, 0x5b, 0x07, 0xbe, 0xbf,
	0xf4, 0x2b, 0xda, 0xaa, 0x40, 0xf5, 0x8b, 0xe4, 0xfa, 0xb3, 0x18, 0xa8, 0xcd, 0x0e, 0x6f, 0xec,
	0x3c, 0xf7, 0x93, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5f, 0x59, 0xf2, 0x21, 0x6e, 0x02, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NetworkPolicyHostsDiscoveryServiceClient is the client API for NetworkPolicyHostsDiscoveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkPolicyHostsDiscoveryServiceClient interface {
	DeltaNetworkPolicyHosts(ctx context.Context, opts ...grpc.CallOption) (NetworkPolicyHostsDiscoveryService_DeltaNetworkPolicyHostsClient, error)
	StreamNetworkPolicyHosts(ctx context.Context, opts ...grpc.CallOption) (NetworkPolicyHostsDiscoveryService_StreamNetworkPolicyHostsClient, error)
	FetchNetworkPolicyHosts(ctx context.Context, in *v2.DiscoveryRequest, opts ...grpc.CallOption) (*v2.DiscoveryResponse, error)
}

type networkPolicyHostsDiscoveryServiceClient struct {
	cc *grpc.ClientConn
}

func NewNetworkPolicyHostsDiscoveryServiceClient(cc *grpc.ClientConn) NetworkPolicyHostsDiscoveryServiceClient {
	return &networkPolicyHostsDiscoveryServiceClient{cc}
}

func (c *networkPolicyHostsDiscoveryServiceClient) DeltaNetworkPolicyHosts(ctx context.Context, opts ...grpc.CallOption) (NetworkPolicyHostsDiscoveryService_DeltaNetworkPolicyHostsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NetworkPolicyHostsDiscoveryService_serviceDesc.Streams[0], "/cilium.NetworkPolicyHostsDiscoveryService/DeltaNetworkPolicyHosts", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkPolicyHostsDiscoveryServiceDeltaNetworkPolicyHostsClient{stream}
	return x, nil
}

type NetworkPolicyHostsDiscoveryService_DeltaNetworkPolicyHostsClient interface {
	Send(*v2.DeltaDiscoveryRequest) error
	Recv() (*v2.DeltaDiscoveryResponse, error)
	grpc.ClientStream
}

type networkPolicyHostsDiscoveryServiceDeltaNetworkPolicyHostsClient struct {
	grpc.ClientStream
}

func (x *networkPolicyHostsDiscoveryServiceDeltaNetworkPolicyHostsClient) Send(m *v2.DeltaDiscoveryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *networkPolicyHostsDiscoveryServiceDeltaNetworkPolicyHostsClient) Recv() (*v2.DeltaDiscoveryResponse, error) {
	m := new(v2.DeltaDiscoveryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *networkPolicyHostsDiscoveryServiceClient) StreamNetworkPolicyHosts(ctx context.Context, opts ...grpc.CallOption) (NetworkPolicyHostsDiscoveryService_StreamNetworkPolicyHostsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NetworkPolicyHostsDiscoveryService_serviceDesc.Streams[1], "/cilium.NetworkPolicyHostsDiscoveryService/StreamNetworkPolicyHosts", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkPolicyHostsDiscoveryServiceStreamNetworkPolicyHostsClient{stream}
	return x, nil
}

type NetworkPolicyHostsDiscoveryService_StreamNetworkPolicyHostsClient interface {
	Send(*v2.DiscoveryRequest) error
	Recv() (*v2.DiscoveryResponse, error)
	grpc.ClientStream
}

type networkPolicyHostsDiscoveryServiceStreamNetworkPolicyHostsClient struct {
	grpc.ClientStream
}

func (x *networkPolicyHostsDiscoveryServiceStreamNetworkPolicyHostsClient) Send(m *v2.DiscoveryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *networkPolicyHostsDiscoveryServiceStreamNetworkPolicyHostsClient) Recv() (*v2.DiscoveryResponse, error) {
	m := new(v2.DiscoveryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *networkPolicyHostsDiscoveryServiceClient) FetchNetworkPolicyHosts(ctx context.Context, in *v2.DiscoveryRequest, opts ...grpc.CallOption) (*v2.DiscoveryResponse, error) {
	out := new(v2.DiscoveryResponse)
	err := c.cc.Invoke(ctx, "/cilium.NetworkPolicyHostsDiscoveryService/FetchNetworkPolicyHosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkPolicyHostsDiscoveryServiceServer is the server API for NetworkPolicyHostsDiscoveryService service.
type NetworkPolicyHostsDiscoveryServiceServer interface {
	DeltaNetworkPolicyHosts(NetworkPolicyHostsDiscoveryService_DeltaNetworkPolicyHostsServer) error
	StreamNetworkPolicyHosts(NetworkPolicyHostsDiscoveryService_StreamNetworkPolicyHostsServer) error
	FetchNetworkPolicyHosts(context.Context, *v2.DiscoveryRequest) (*v2.DiscoveryResponse, error)
}

func RegisterNetworkPolicyHostsDiscoveryServiceServer(s *grpc.Server, srv NetworkPolicyHostsDiscoveryServiceServer) {
	s.RegisterService(&_NetworkPolicyHostsDiscoveryService_serviceDesc, srv)
}

func _NetworkPolicyHostsDiscoveryService_DeltaNetworkPolicyHosts_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NetworkPolicyHostsDiscoveryServiceServer).DeltaNetworkPolicyHosts(&networkPolicyHostsDiscoveryServiceDeltaNetworkPolicyHostsServer{stream})
}

type NetworkPolicyHostsDiscoveryService_DeltaNetworkPolicyHostsServer interface {
	Send(*v2.DeltaDiscoveryResponse) error
	Recv() (*v2.DeltaDiscoveryRequest, error)
	grpc.ServerStream
}

type networkPolicyHostsDiscoveryServiceDeltaNetworkPolicyHostsServer struct {
	grpc.ServerStream
}

func (x *networkPolicyHostsDiscoveryServiceDeltaNetworkPolicyHostsServer) Send(m *v2.DeltaDiscoveryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *networkPolicyHostsDiscoveryServiceDeltaNetworkPolicyHostsServer) Recv() (*v2.DeltaDiscoveryRequest, error) {
	m := new(v2.DeltaDiscoveryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _NetworkPolicyHostsDiscoveryService_StreamNetworkPolicyHosts_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NetworkPolicyHostsDiscoveryServiceServer).StreamNetworkPolicyHosts(&networkPolicyHostsDiscoveryServiceStreamNetworkPolicyHostsServer{stream})
}

type NetworkPolicyHostsDiscoveryService_StreamNetworkPolicyHostsServer interface {
	Send(*v2.DiscoveryResponse) error
	Recv() (*v2.DiscoveryRequest, error)
	grpc.ServerStream
}

type networkPolicyHostsDiscoveryServiceStreamNetworkPolicyHostsServer struct {
	grpc.ServerStream
}

func (x *networkPolicyHostsDiscoveryServiceStreamNetworkPolicyHostsServer) Send(m *v2.DiscoveryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *networkPolicyHostsDiscoveryServiceStreamNetworkPolicyHostsServer) Recv() (*v2.DiscoveryRequest, error) {
	m := new(v2.DiscoveryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _NetworkPolicyHostsDiscoveryService_FetchNetworkPolicyHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v2.DiscoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkPolicyHostsDiscoveryServiceServer).FetchNetworkPolicyHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cilium.NetworkPolicyHostsDiscoveryService/FetchNetworkPolicyHosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkPolicyHostsDiscoveryServiceServer).FetchNetworkPolicyHosts(ctx, req.(*v2.DiscoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetworkPolicyHostsDiscoveryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cilium.NetworkPolicyHostsDiscoveryService",
	HandlerType: (*NetworkPolicyHostsDiscoveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchNetworkPolicyHosts",
			Handler:    _NetworkPolicyHostsDiscoveryService_FetchNetworkPolicyHosts_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DeltaNetworkPolicyHosts",
			Handler:       _NetworkPolicyHostsDiscoveryService_DeltaNetworkPolicyHosts_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamNetworkPolicyHosts",
			Handler:       _NetworkPolicyHostsDiscoveryService_StreamNetworkPolicyHosts_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cilium/api/nphds.proto",
}
